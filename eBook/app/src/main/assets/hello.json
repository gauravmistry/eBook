{
  "StatusCode": "200",
  "StatusMessage": "Success",
  "Data": [
    {
      "PermissionId": "RecyclerView.ItemAnimator is a class that defines the animations performed on items and will animate ViewGroup changes such as add/delete/select notified to the adapter. DefaultItemAnimator is a basic animation available by default with the RecyclerView.\n\nTo customize the DefaultItemAnimator add an item animator to the RecyclerView. This code slows down the process of adding and removing items from the RecyclerView.\n\nAdd this after our last code in the onCreate method:",
      "UserId": "Another approach to animating RecyclerView items is to use Android Interpolators. According to developer.android.com, an interpolator defines the rate of change of an animation.\n\nThe following examples represent two animations I implemented using these interpolators. Save the files in /anim/ in the project resources folder.\n\nanticipate_overshoot_interpolator.xmlIf you take a closer look at the loadAnimation() method, it requires a context parameter and that’s why the Adapter’s constructor was modified in the first place. Now we can animate the RecyclerView. Inside the onBindViewHolder() method, call the animate() function and pass the holder parameter of the View_Holder class.\n\nRun the app and test the animation. Here is how the bounce_interpolator animation works.Using this method of animation in the RecyclerView is easy. If you want new animations, just change the interpolation type in the examples above, set the parameters to your preference and you will have a new animation style.\n\nHaving trouble setting onItemClickListener to RecyclerView items?\nEven though displaying elements in RecyclerView is better, in terms of performance, than its predecessors, ListView and GridView. These views have the ability to add item click listeners to intercept which element of the list was clicked. \nHere is how it looks on a ListView:\n\nListView listView = ...;\nlistView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n    @Override\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n    }\n});public class CustomRVItemTouchListener implements RecyclerView.OnItemTouchListener {\n\n    //GestureDetector to intercept touch events\n    GestureDetector gestureDetector;\n    private RecyclerViewItemClickListener clickListener;\n\n    public CustomRVItemTouchListener(Context context, final RecyclerView recyclerView, final RecyclerViewItemClickListener clickListener) {\n        this.clickListener = clickListener;\n        gestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {\n\n            @Override\n            public boolean onSingleTapUp(MotionEvent e) {\n                return true;\n            }\n\n            @Override\n            public void onLongPress(MotionEvent e) {\n                //find the long pressed view\n                View child = recyclerView.findChildViewUnder(e.getX(), e.getY());\n                if (child != null && clickListener != null) {\n                    clickListener.onLongClick(child, recyclerView.getChildLayoutPosition(child));\n                }\n            }\n        });\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(RecyclerView recyclerView, MotionEvent e) {\n\n        View child = recyclerView.findChildViewUnder(e.getX(), e.getY());\n        if (child != null && clickListener != null && gestureDetector.onTouchEvent(e)) {\n            clickListener.onClick(child, recyclerView.getChildLayoutPosition(child));\n        }\n        return false;\n    }\n\n    @Override\n    public void onTouchEvent(RecyclerView rv, MotionEvent e) {\n\n    }\n\n    @Override\n    public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {\n\n    }\n}\nBasically what this class does is, detect the RecyclerView element under the (X, Y) position where the screen was clicked. This class is helpful for both click types created by the interface."
    },
    {
      "PermissionId": "As you can see the custom touch listener provides a reference of the RecyclerView item which was clicked and its position in the list.\n\nConclusion\nThe RecyclerView is a flexible pattern for view recycling eliminating the imitations of ListView and GridView by making item animations easy to set and reuse. Getting used to development with RecyclerView may need some work at first, but it’s worth your time.\n\nIf you have any questions or comments please let me know below.\n\nFor more on Android, watch our tutorial Outputting Data to Your Android App’s User Interface.\n\nValdio Veliu\nMeet the author\nValdio Veliu \nValdio recently graduated in Computer Engineering. He is a mobile developer, who is passionate about mobile technologies and learning new things. He has worked with languages such as C, Java, php and is currently focused on Java, mobile and web development\n \nReport Advertisement\n\nReport Advertisement\n\nReport Advertisement\n\nReport Advertisement\nJavascript   April 04, 2019   By Ahmed Bouchefra\nHow to Build a News App with Ionic 4 & Angular\nIn this tutorial we’ll be using Ionic 4 to build a news application that makes use of a third-party news API.\n\nIonic 4 is the latest version of Ionic, a mobile framework originally built on top of Cordova and Angular. Ionic allows users to create hybrid mobile apps with HTML, CSS and JavaScript and their related web technologies.\n\nWhat makes Ionic 4 the best version yet is that it’s now framework agnostic. This means it’s not dependent on Angular anymore, and you you’ll be able to use it with any framework or library you are familiar with, or with plain JavaScript.\n\nBut at the time of this writing, Ionic CLI only supports generating Ionic projects based on Angular, so we’ll be using an Angular/Ionic project to build our news application.\n\nSee a hosted version of the application we’ll be building and grab the source code from this GitHub repository.\n\nPrerequisites\nLet’s get started with the prerequisites you need to be able to follow this tutorial comfortably.\n\nYou will need to have Node.js and npm installed on your development machine. If that’s not the case, the simplest approach is to go to the official website and grab the binaries for your system. Node.js is not a requirement for Ionic itself, but for Ionic CLI (and Angular CLI behind the scenes) which is the tool that we’ll be using to generate Ionic projects.\nWe’ll be using Ionic with Angular, which is based on TypeScript, so you need to be familiar with the basic concepts of TypeScript.\nInstalling Ionic CLI 4\nIonic CLI 4 is the latest version of the CLI. Open a terminal and run the following command to install it on your system:\n\n$ npm install -g @ionic/cli\nPlease note that you may need to add sudo before your command in order to install the package globally if you’re using a Debian-based system or macOS. For Windows, if you get any permission errors you can use a command prompt with administrator access. In all systems, you can avoid the npm permission errors by either reinstalling npm with a node version manager (recommended) or manually changing npm’s default directory. See the docs.\n\nNext, you can generate a project based on Angular by running the following command:\n\n$ ionic start\nThe CLI will interactively ask you for the necessary information about your project, such as the name (Enter newsapp or whatever name you prefer) and the starter template (choose sidemenu which will give you a starting project with a side menu and navigation of the box).\n\nNext press Enter to instruct the CLI to start generating the files and installing the dependencies from npm.\n\nIonic CLI\n\nFinally the CLI will ask you if you want to Install the free Ionic Appflow SDK and connect your app? (Y/n). You can type n if you don’t want to integrate the cloud services offered by Ionic.\n\nAppflow is a continuous integration and deployment platform for Ionic developers. Appflow helps developers continuously build and ship their iOS, Android, and web apps faster than ever. You can find more information about Appflow from the official docs.\n\n",
      "UserId": "Now let’s add some theming to our application UI.\n\nOpen the src/app/about/about.page.html and add a primary color to the menu toolbar and a dark color to the content section:\n\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>\n      About\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"dark\" padding>\n<p>\n  This is a news app built with Ionic 4 and the <a href=\"https://newsapi.org/\">News API</a>\n</p>\n</ion-content>\nThis is a screenshot of the page:\n\nIonic 4 Angular\n\nNext, let’s theme the homepage. Open the src/app/home/home.page.html file and replace its contents with the following:\n\n<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>\n      Home\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"primary\">\n    <ion-card>\n      <ion-card-header>\n        <ion-card-subtitle>Welcome to our News App</ion-card-subtitle>\n      </ion-card-header>\n      <ion-card-content>\n        <p>\n          Enjoy the latest news from TechCrunch. \n        </p>\n        <ion-spinner *ngIf=\"!articles\"  name=\"dots\"></ion-spinner>\n      </ion-card-content>\n    </ion-card>\n</ion-content>\nNext, open the src/app/home/home.page.scss file and add:\n\nion-card{\n  --background: #021b46;\n  --color: #fff;\n}\nIonic 4 Angular TechCrunch\n\nAlso, open the src/app/app.component.html file and add a primary color to the menu toolbar:\n\n        <ion-toolbar color=\"primary\">\n          <ion-title>Menu</ion-title>\n        </ion-toolbar>\nIonic 4 Angular menu\n\nGetting News Data\nLet’s now see how you can retrieve news data from the third-party news API available from NewsAPI.org/, which offers a free plan for open source and development projects.\n\nYou first need to head here to register for an API key:\n\nIonic 4 Angular news API key\n\nFill the form and submit it. You should get redirected to the page where you can copy your API key:\n\nIonic 4 Angular API key\n\nAdding a Service\nNext, let’s create a service that will take care of getting data from the news API. In your terminal, run the following command:\n\n$ ionic generate service api\nNext, open the src/app/app.module.ts file then import HttpClientModule and add it to the imports array:\n\n// [...]\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [\n    // [...]\n    HttpClientModule,\n  ],\n  // [...]\n})\nexport class AppModule {}\nNext, open the src/app/api.service.ts file and inject HttpClient via the service constructor:\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private httpClient: HttpClient) { }\n}\nNext, define an API_KEY variable which will hold your API key from the News API:\n\nexport class ApiService {\n  API_KEY = 'YOUR_API_KEY';\nFinally, add a method that sends a GET request to an endpoint for TechCrunch news:\n\n  getNews(){\n    return this.httpClient.get(`https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=${this.API_KEY}`);\n  }\nThat’s all we need to add for the service.\n\nOpen the src/app/home/home.page.ts file and import, then inject, ApiService via the component constructor:\n\nimport { Component } from '@angular/core';\nimport { ApiService } from '../api.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage {\n  constructor(private apiService: ApiService){}\n}\nNext, add an articles variable that will hold the retrieved news:\n\nexport class HomePage {\n  articles;\nAdd an ionViewDidEnter() method, where you call the getNews() method of ApiService to retrieve the news:\n\n  ionViewDidEnter(){\n\n    this.apiService.getNews().subscribe((data)=>{\n      console.log(data);\n      this.articles = data['articles'];\n    });\n  }\nFinally, let’s iterate through the articles variable and display the news on our homepage.\n\nAgain, open the src/app/home/home.page.html file and add the following code:\n\n  <ion-card *ngFor=\"let article of articles\">\n    <ion-img src=\"{{article.urlToImage}}\"></ion-img>\n    <ion-card-header>\n      <ion-card-subtitle>{{article.title}}</ion-card-subtitle>\n    </ion-card-header>\n    <ion-card-content>\n      <p>\n        {{article.description}}\n      </p>\n      <ion-button ion-button fill=\"outline\" href=\"{{article.url}}\" large>Read full article</ion-button>\n\n    </ion-card-content>\n  </ion-card>\nWe simply use the ngFor directive to loop through the articles variable and display the image, title, description and URL of each article inside a card component.\n\nThis is a screenshot of the result:\n\nIonic 4 Angular mobile app\n\nYou can either host this application on the web (as a PWA) or build it and publish it on the app stores. You can find a live version from this link and the source code in this GitHub repository.\n\nConclusion\nWe’ve built a news application from scratch with Ionic 4 and Angular. The application still has plenty of room for improvement, so feel free to play with it and extend it on your own. For example, you could add sources other than TechCrunch, and allow the user to select the source of the news.\n\nAhmed Bouchefra\nMeet the author\nAhmed Bouchefra \nAhmed is a web entrepreneur, developer, digital marketer and blogger. He writes about software and website development, money-making tips, SEO and more. You can find more of his writing on his Techiediaries site.\n \nReport Advertisement\n\nReport Advertisement\n\n$ cd ./newsapp\n$ ionic serve\nYour application will be available from the http://localhost:8100 address.\n\nThis is a screenshot of the application at this point:\n\nIonic app example\n\nYou can see that we already have a pretty decent starting application without doing any development yet. Let’s make some changes to our project.\n\nThe project already has two pages — home and list. Leave the first page and delete the list page.\n\nFirst, remove the src/app/list folder. Next, open the src/app/app-routing.module.ts file and remove the route entry for the list page:\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full'\n  },\n  {\n    path: 'home',\n    loadChildren: './home/home.module#HomePageModule'\n  },\n  {\n    path: 'list',\n    loadChildren: './list/list.module#ListPageModule'\n  }\n];\nWe have three routes, one for the empty path that redirects to the /home route, the /home route that displays the home page, and the /list route that displays the list page. You simply need to remove the last object.\n\nYou also need to remove the link for the list page from the side menu. Open the src/app/app.component.ts file. Locate the appPages array defined in the component:\n\n  public appPages = [\n    {\n      title: 'Home',\n      url: '/home',\n      icon: 'home'\n    },\n    {\n      title: 'List',\n      url: '/list',\n      icon: 'list'\n    }\n  ];\nAnd simply remove the second object: { title: 'List', url: '/list', icon: 'list'}.\n\nNow, let’s create an about page for our application. In your terminal, run the following command:"
    }
  ]
}